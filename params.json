{"name":"Rails Bootstrap Form Extensions","tagline":"Specialized controls added to the bootstrap_form gem","body":"# Rails Bootstrap Form Extensions\r\n\r\n**Table of Contents**\r\n\r\n- [Requirements](#requirements)\r\n- [Dependencies](#dependencies)\r\n- [Installation](#installation)\r\n- [SubmitBar](#submitbar)\r\n\t- [Configuration](#configuration)\r\n\t- [Default partial](#default-partial)\r\n- [Duration](#duration)\r\n  - [Duration without bootstrap](#duration-without-bootstrap)\r\n- [Timespan](#timespan)\r\n\t- [Configuration](#configuration-1)\r\n- [ArrayedField](#arrayedfield)\r\n\t- [arrayed_text_field](#arrayed_text_field)\r\n\t- [arrayed_url_field](#arrayed_url_field)\r\n\t- [arrayed_json_field](#arrayed_json_field)\r\n- [Scheduler](#scheduler)\r\n\t- [Model](#Model)\r\n\t\t- [Default selection](#Default-selection)\r\n- [Date and Time Pickers](#date-and-time-pickers)\r\n\t- [DatePicker](#datepicker)\r\n\t- [TimePicker](#timepicker)\r\n\t- [DateTimePicker](#datetimepicker)\r\n- [SelectOrNew](#selectornew)\r\n\t- [Handling the new value](#Handling-the-new-value)\r\n- [Contributing](#contributing)\r\n\r\n## Requirements\r\n\r\n* Ruby 2.0+\r\n* Rails 4.0+\r\n* Twitter Bootstrap 3.0+\r\n\r\n## Dependencies\r\n\r\nThis gem will install the following gems/libraries:\r\n\r\n* [Rails Bootstrap Forms](https://github.com/bootstrap-ruby/rails-bootstrap-forms), ~> 2.3\r\n* [Bootstrap Datepicker for Rails](https://github.com/Nerian/bootstrap-datepicker-rails), ~> 1.4\r\n* [bootstrap-datepicker](https://github.com/eternicode/bootstrap-datepicker), 1.5.0\r\n* [Bootstrap Timepicker](https://github.com/jdewit/bootstrap-timepicker), 0.5.0\r\n* [$.html5data](http://markdalgleish.com/projects/jquery-html5data/), 1.0\r\n\r\n## Installation\r\n\r\nAdd it to your Gemfile:\r\n\r\n```ruby\r\ngem 'bootstrap_form_extensions'\r\n```\r\n\r\nThen:\r\n\r\n`bundle`\r\n\r\nThen require the JS in your `application.js` file:\r\n\r\n```js\r\n/*\r\n *= require bootstrap_form_extensions\r\n */\r\n```\r\n\r\nAnd require the CSS in your `application.css` file:\r\n\r\n```css\r\n/*\r\n *= require bootstrap_form_extensions\r\n */\r\n```\r\n\r\n## SubmitBar\r\n\r\nUsing all the default arguments, doing this:\r\n\r\n```erb\r\n<%= f.submit_bar %>\r\n```\r\n\r\ngenerates a form group, with two buttons: Save (a dropdown menu, that includes 'Save and duplicate', and 'Save and new' options), and Cancel:\r\n\r\n```html\r\n<div class=\"form-group col-sm-12\">\r\n  <div class='pull-left submitbar-left'>\r\n    <div class=\"btn-group dropup submitbar-submit-group\">\r\n      <button type=\"submit\" class=\"btn btn-primary submitbar-save\">Save</button>\r\n      <button type=\"button\" class=\"btn btn-primary dropdown-toggle submitbar-next-action-toggle\" data-toggle=\"dropdown\">\r\n        <span class=\"caret\"></span>\r\n        <span class=\"sr-only\">Toggle Dropdown</span>\r\n      </button>\r\n      <ul class=\"dropdown-menu submitbar-next-action-menu\" role=\"menu\">\r\n        <li><button type=\"submit\" name=\"next_action\" class=\"btn-link submitbar-duplicate\" value=\"duplicate\">Save and duplicate</button></li>\r\n        <li><button type=\"submit\" name=\"next_action\" class=\"btn-link submitbar-new\" value=\"new\">Save and new</button></li>\r\n      </ul>\r\n    </div>\r\n    <a class=\"btn btn-default submitbar-cancel\" rel=\"nofollow\" href=\"/things\">Cancel</a>\r\n  </div>\r\n</div>\r\n```\r\n\r\n### Configuration\r\n\r\nThe following arguments can be used to configure the submit bar:\r\n\r\n| Argument | Description | Default |\r\n| -------- |-------------| --------|\r\n| show_submit_button         | Show the Save button | true |\r\n| submit_button_text         | Text used in the save button | 'Save' |\r\n| show_submit_menu           | Show the dropdown menu on the save button | true |\r\n| show_submit_and_dup_button | Show a 'Save and duplicate' option in the dropdown submit menu. The 'Save' text is affected by the submit_button_text argument | true |\r\n| show_submit_and_new_button | Show a 'Save and new' option in the dropdown submit menu. The 'Save' text is affected by the submit_button_text argument | true |\r\n| show_cancel_button         | Show the Cancel button| true |\r\n| cancel_button_text         | Text used in the cancel button | 'Cancel' |\r\n| cancel_button_url          | URL used in the cancel button | If the form object is a persisted ActiveRecord instance, the url to the show action; if not, the index action. If none of these path exit, then it uses 'javascript:history.back();' |\r\n| extra_buttons              | An array of hashes with the definition of the extra buttons to be added between the submit and cancel buttons. The options should include at least :text and :url for the button. Anything else is passed as html options to the button | [] |\r\n| right_buttons              | An array of hashes with the definition of the extra buttons to be added on the right side of the submit bar. The options should include at least :text and :url for the button. Anything else is passed as html options to the button | [] |\r\n| partial                    | Partial template used to render the submit bar | See _Default partial_ below for details |\r\n\r\nYou can also change the default of `partial`, `show_submit_button`, `submit_button_text`, `show_submit_menu`, `show_submit_and_dup_button`, `show_submit_and_new_button`, `show_cancel_button`, `cancel_button_text`, or `back_button_text`, by invoking them on the BootstrapFormExtensions::SubmitBar, for example in an initializer file, like this:\r\n\r\n```ruby\r\nBootstrapFormExtensions::SubmitBar.partial = 'layouts/form_footer'\r\nBootstrapFormExtensions::SubmitBar.show_submit_menu = false\r\n```\r\n\r\n### Default partial\r\n\r\nThis is the actual code of the default partial (located in app/views/bootstrap_form_extensions/_submit_bar.html.erb):\r\n\r\n```erb\r\n<div class=\"form-group\">\r\n  <div class='pull-left submitbar-left'>\r\n    <% if show_submit_button %>\r\n      <div class=\"btn-group dropup submitbar-submit-group\">\r\n        <button type=\"submit\" class=\"btn btn-primary submitbar-save\"><%= submit_button_text %></button>\r\n        <% if show_submit_menu %>\r\n          <button type=\"button\" class=\"btn btn-primary dropdown-toggle submitbar-next-action-toggle\" data-toggle=\"dropdown\">\r\n            <span class=\"caret\"></span>\r\n            <span class=\"sr-only\">Toggle Dropdown</span>\r\n          </button>\r\n          <ul class=\"dropdown-menu submitbar-next-action-menu\" role=\"menu\">\r\n            <% if show_submit_and_dup_button %>\r\n              <li><button type=\"submit\" name=\"next_action\" class=\"btn-link submitbar-duplicate\" value=\"duplicate\"><%= submit_button_text %> and duplicate</button></li>\r\n            <% end %>\r\n            <% if show_submit_and_new_button %>\r\n              <li><button type=\"submit\" name=\"next_action\" class=\"btn-link submitbar-new\" value=\"new\"><%= submit_button_text %> and new</button></li>\r\n            <% end %>\r\n          </ul>\r\n        <% end %>\r\n      </div>\r\n    <% end %>\r\n    <% extra_buttons.each do |text:, url:, options:| %>\r\n      <%= link_to text, url, options %>\r\n    <% end %>\r\n    <% if show_cancel_button %>\r\n      <%= link_to cancel_button_text, cancel_button_url, class: \"btn btn-default submitbar-cancel\", rel: \"nofollow\" %>\r\n    <% end %>\r\n  </div>\r\n  <% if right_buttons.any? %>\r\n    <div class='pull-right submitbar-right'>\r\n      <% right_buttons.each do |text:, url:, options:| %>\r\n        <%= link_to text, url, options %>\r\n      <% end %>\r\n    </div>\r\n  <% end %>\r\n</div>\r\n```\r\n\r\nYou can use it as a template to create your own partial(s).\r\n\r\n## Duration\r\n\r\nHaving, for example, a column `duration_in_seconds` (a float column, to handle milliseconds), doing this:\r\n\r\n```erb\r\n<%= f.duration :duration_in_seconds %>\r\n```\r\n\r\ngenerates this html:\r\n\r\n```html\r\n<div class=\"form-group duration-group\" data-duration=\"true\">\r\n  <label class=\"control-label col-sm-2\" for=\"thing_duration_in_seconds\">Duration in seconds</label>\r\n  <div class=\"col-sm-10 form-inline\">\r\n    <input class=\"duration-seconds\" id=\"thing_duration_in_seconds\" name=\"thing[duration_in_seconds]\" type=\"hidden\" value=\"0.000\">\r\n    <input class=\"form-control hours\" id=\"thing_hours\" min=\"0\" name=\"thing[hours]\" type=\"number\" value=\"0\">\r\n    :\r\n    <input class=\"form-control minutes\" id=\"thing_minutes\" max=\"59\" min=\"0\" name=\"thing[minutes]\" type=\"number\" value=\"0\">\r\n    :\r\n    <input class=\"form-control seconds\" id=\"thing_seconds\" max=\"59\" min=\"0\" name=\"thing[seconds]\" type=\"number\" value=\"0\">\r\n    .\r\n    <input class=\"form-control milliseconds\" id=\"thing_milliseconds\" max=\"999\" min=\"0\" name=\"thing[milliseconds]\" type=\"number\" value=\"0\">\r\n  </div>\r\n</div>\r\n```\r\n\r\nIt accepts any option you'd pass to a form_group.\r\n\r\n### Duration without bootstrap\r\n\r\nThere is a version of this control that doesn't apply all bootstrap styling:\r\n\r\n```erb\r\n<%= f.duration_without_bootstrap :duration_in_seconds %>\r\n```\r\n\r\ngenerates this html:\r\n\r\n```html\r\n<div class=\"duration-group\" data-duration=\"true\">\r\n  <input class=\"duration-seconds\" id=\"thing_duration_in_seconds\" name=\"thing[duration_in_seconds]\" type=\"hidden\" value=\"0\">\r\n  <input class=\"hours\" id=\"thing_hours\" min=\"0\" name=\"thing[hours]\" type=\"number\" value=\"0\">\r\n  :\r\n  <input class=\"minutes\" id=\"thing_minutes\" max=\"59\" min=\"0\" name=\"thing[minutes]\" type=\"number\" value=\"0\">\r\n  :\r\n  <input class=\"seconds\" id=\"thing_seconds\" max=\"59\" min=\"0\" name=\"thing[seconds]\" type=\"number\" value=\"0\">\r\n  .\r\n  <input class=\"milliseconds\" id=\"thing_milliseconds\" max=\"999\" min=\"0\" name=\"thing[milliseconds]\" type=\"number\" value=\"0\">\r\n</div>\r\n```\r\n\r\nIf you still want to use the bootstrap styling, but not the form formatting (for instance, when you need to include this control in an inline form, or inside another element), you can customize like this:\r\n\r\n```erb\r\n<%= f.duration_without_bootstrap :duration_in_seconds, class: 'form-control', wrapper_class: 'form-inline' %>\r\n```\r\n\r\n## Timespan\r\n\r\nHaving, for example, a column `duration_in_seconds`, doing this:\r\n\r\n```erb\r\n<%= f.timespan :duration_in_seconds %>\r\n```\r\n\r\ngenerates this html:\r\n\r\n```html\r\n<span data-timespan=\"true\">\r\n  <input class=\"timespan-seconds\" type=\"hidden\" value=\"3600\" name=\"thing[duration_in_seconds]\" id=\"thing_duration_in_seconds\" />\r\n  <div class=\"form-group\">\r\n    <input type=\"text\" name=\"duration_quantity\" id=\"duration_quantity\" value=\"1\" size=\"5\" class=\"form-control timespan-quantity\" />\r\n  </div>\r\n  &nbsp;\r\n  <div class=\"form-group\">\r\n    <select name=\"duration_unit\" id=\"duration_unit\" class=\"form-control timespan-unit\">\r\n      <option selected=\"selected\" value=\"1\">seconds</option>\r\n      <option value=\"60\">minutes</option>\r\n      <option value=\"3600\">hours</option>\r\n      <option value=\"86400\">days</option>\r\n      <option value=\"604800\">weeks</option>\r\n      <option value=\"18144000\">months</option>\r\n    </select>\r\n  </div>\r\n</span>\r\n```\r\n\r\n### Configuration\r\n\r\nThe following arguments can be used to configure the timespan:\r\n\r\n| Argument | Description | Default |\r\n| -------- |-------------| --------|\r\n| units            | The list of units that will be displayed       | [ :seconds, :minutes, :hours, :days, :weeks, :months ] |\r\n| quantity_options | html options to be added to the quantity input | {} |\r\n| unit_options     | html options to be added to the unit select    | {} |\r\n\r\nYou can also change the default of `units` by invoking it on the BootstrapFormExtensions::Timespan, for example in an initializer file, like this:\r\n\r\n```ruby\r\nBootstrapFormExtensions::Timespan.units = [ :hours, :days ]\r\n```\r\n\r\n## ArrayedField\r\n\r\nArrayedField provides three helpers:\r\n\r\n### arrayed_text_field\r\n\r\nGiven a column that holds an array of texts, this helper adds a multiple line text inputs:\r\n\r\n```erb\r\n<%= f.arrayed_text_field :lists %>\r\n```\r\n\r\nIt accepts any option you'd pass to a form_group. If the column provided doesn't exist, or is not an array, it assumes an empty array as the value.\r\n\r\n### arrayed_url_field\r\n\r\nGiven a column that holds an array of URLs, this helper adds a multiple line url inputs:\r\n\r\n```erb\r\n<%= f.arrayed_url_field :urls %>\r\n```\r\n\r\nIt accepts any option you'd pass to a form_group. If the column provided doesn't exist, or is not an array, it assumes an empty array as the value.\r\n\r\n### arrayed_json_field\r\n\r\nGiven a column that holds an array of hashes, this helper adds a multiple line, multiple field, text/select inputs:\r\n\r\n```erb\r\n<%= f.arrayed_json_field :variables, [ :name, :value ] %>\r\n```\r\n\r\nThe generated html contains multiple lines like this:\r\n\r\n```html\r\n<div class=\"col-sm-2\">\r\n  <input type=\"text\" name=\"thing[variables][][name]\" class=\"form-control\" placeholder=\"name\" />\r\n</div>\r\n<div class=\"col-sm-2\">\r\n  <input type=\"text\" name=\"thing[variables][][value]\" class=\"form-control\" placeholder=\"value\" />\r\n</div>\r\n```\r\n\r\nThe list of fields in the hash can be customized further:\r\n\r\n```erb\r\n<%= f.arrayed_json_field :variables, [ { name: { type: :select, options: [ [ \"One\", \"var1\" ], [ \"Two\", \"var2\" ] ] } }, :value ] %>\r\n```\r\n\r\n`type` can be `:text` or `:select`.\r\n\r\nThe generated html for each element of the array would look something like this:\r\n\r\n```html\r\n<div class=\"col-sm-2\">\r\n  <select class=\"form-control\">\r\n    <option value=\"var1\">One</option>\r\n    <option value=\"var2\">Two</option>\r\n  </select>\r\n</div>\r\n<div class=\"col-sm-2\">\r\n  <input class=\"form-control\" name=\"thing[variables][][value]\" placeholder=\"value\" type=\"text\">\r\n</div>\r\n```\r\n\r\nIt accepts any option you'd pass to a form_group. If the column provided doesn't exist, or is not an array, it assumes an empty array as the value.\r\n\r\n## Scheduler\r\n\r\nThis widget creates a grid of days and hours to choose a schedule. Called like this:\r\n\r\n```erb\r\n<%= f.scheduler :schedule %>\r\n```\r\n\r\ngenerates this:\r\n\r\n![scheduler - badge](https://raw.githubusercontent.com/jdugarte/rails-bootstrap-form-extensions/gh-pages/images/scheduler%20-%20badge%20-%20partial%20selection.png)\r\n\r\nThis grid reflects the schedule selected. Clicking on the grid brings up the schedule editor:\r\n\r\n![scheduler - editor](https://raw.githubusercontent.com/jdugarte/rails-bootstrap-form-extensions/gh-pages/images/scheduler%20-%20editor%20-%20partial%20selection.png)\r\n\r\nThe days and hours headers are clickable, as well as each cell, to allow any custom selection.\r\n\r\n`scheduler` accepts the same arguments than bootstrap form's `form_group`: a method for the value, and options for the form group.\r\n\r\n### Model\r\n\r\nThis control expects the attribute to be serialized like this:\r\n\r\n```ruby\r\n# Migration:\r\n\r\nclass AddSchedulerField < ActiveRecord::Migration\r\n  def change\r\n    add_column :things, :schedule, :text\r\n  end\r\nend\r\n\r\n# Model\r\n\r\nclass Thing < ActiveRecord::Base\r\n  ...\r\n  serialize :schedule, BootstrapFormExtensions::Scheduler.serializer\r\n  ...\r\nend\r\n```\r\n\r\nThis will serialize the column to yaml. If you're using an array column (e.g. PostgreSQL), you could do:\r\n\r\n```ruby\r\n# Migration:\r\n\r\nclass AddSchedulerField < ActiveRecord::Migration\r\n  def change\r\n    add_column :things, :schedule, :text, array: true, default: []\r\n  end\r\nend\r\n\r\n# Model\r\n\r\nclass Thing < ActiveRecord::Base\r\n  ...\r\n  serialize :schedule, BootstrapFormExtensions::Scheduler.serializer to: :array\r\n  ...\r\nend\r\n```\r\n\r\n#### Default selection\r\n\r\nEach hour in the schedule grid is selected by default:\r\n\r\n```ruby\r\n> thing = Thing.new schedule: []\r\n> thing.schedule\r\n=> [[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], ...]\r\n```\r\n\r\nYou can change this default in the model:\r\n\r\n```ruby\r\nclass Thing < ActiveRecord::Base\r\n  ...\r\n  serialize :schedule, BootstrapFormExtensions::Scheduler.serializer default_selection: false\r\n  ...\r\nend\r\n```\r\n\r\nThis would result in:\r\n\r\n```ruby\r\n> thing = Thing.new schedule: []\r\n> thing.schedule\r\n=> [[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], ...]\r\n```\r\n\r\n## Date and Time Pickers\r\n\r\n### DatePicker\r\n\r\nThis helper is a wrapper for the [bootstrap-datepicker](https://github.com/eternicode/bootstrap-datepicker) gem. Using all the default arguments, doing this:\r\n\r\n```erb\r\n<%= f.date_picker :start_date %>\r\n```\r\n\r\ngenerates this html:\r\n\r\n```html\r\n<div class=\"form-group\">\r\n  <label class=\"control-label col-sm-2\" for=\"thing_start_date\">Start date</label>\r\n  <div class=\"col-sm-10\">\r\n    <div class=\"input-group date\" data-date-autoclose=\"true\" data-date-disable-touch-keyboard=\"true\" data-date-enable-on-readonly=\"false\" data-date-format=\"yyyy-mm-dd\" data-date-show-on-focus=\"false\" data-date-today-btn=\"linked\" data-date-today-highlight=\"true\" data-provide=\"datepicker\">\r\n      <input class=\"form-control\" id=\"thing_start_date\" name=\"thing[start_date]\" size=\"10\" type=\"text\" value=\"1971-10-21\">\r\n      <span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-calendar\"></i></span>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nIt accepts any option you'd pass to a form_group. You can also pass any  [options to the bootstrap-datepicker gem](http://bootstrap-datepicker.readthedocs.org/en/stable/options.html), like this:\r\n\r\n```erb\r\n<%= f.date_picker :start_date, widget: { clear_btn: true } %>\r\n```\r\n\r\nThis helper sets these bootstrap-datepicker's defaults (you can overwrite these too, in the same way shown above):\r\n\r\n| Option | Default |\r\n| ------ | --------|\r\n| today_highlight        | true |\r\n| format                 | 'yyyy-mm-dd' |\r\n| today_btn              | 'linked' |\r\n| autoclose              | true |\r\n| disable_touch_keyboard | true |\r\n| enable_on_readonly     | false |\r\n| show_on_focus          | false |\r\n\r\nCheck [bootstrap-datepicker's documentation](http://bootstrap-datepicker.readthedocs.org/en/stable/options.html) for more details on these and other available options.\r\n\r\n### TimePicker\r\n\r\nThis helper is a wrapper for the [Bootstrap Timepicker](https://github.com/jdewit/bootstrap-timepicker) library. Using all the default arguments, doing this:\r\n\r\n```erb\r\n<%= f.time_picker :start_time %>\r\n```\r\n\r\ngenerates this html:\r\n\r\n```html\r\n<div class=\"form-group\">\r\n  <label class=\"control-label col-sm-2\" for=\"thing_start_time\">Start time</label>\r\n  <div class=\"col-sm-10\">\r\n    <div class=\"input-group bootstrap-timepicker\">\r\n      <input class=\"form-control\" data-provide=\"timepicker\" id=\"thing_start_time\" name=\"thing[start_time]\" size=\"8\" type=\"text\" value=\"07:30:00\">\r\n      <span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-time\"></i></span>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nIt accepts any option you'd pass to a form_group. You can also pass any  [options to the Bootstrap Timepicker library](http://m3wolf.github.io/bootstrap3-timepicker/) like this:\r\n\r\n```erb\r\n<%= f.time_picker :start_time, widget: { disable_mousewheel: true } %>\r\n```\r\n\r\nThis helper sets these bootstrap-datepicker's defaults (you can overwrite these too, in the same way shown above):\r\n\r\n| Option | Default |\r\n| ------ | --------|\r\n| minute_step   | 1 |\r\n| show_seconds  | true |\r\n| second_step   | 1 |\r\n| show_meridian | false |\r\n| default_time  | false |\r\n\r\nCheck [Bootstrap Timepicker's documentation](http://m3wolf.github.io/bootstrap3-timepicker/) for more details on these and other available options.\r\n\r\n### DateTimePicker\r\n\r\nThis helper puts the DatePicker and TimePicker together for a DateTime field. Using all the default arguments, doing this:\r\n\r\n```erb\r\n<%= f.date_time_picker :start_at %>\r\n```\r\n\r\ngenerates this html:\r\n\r\n```html\r\n<div class=\"form-group\">\r\n  <label class=\"control-label col-sm-2\" for=\"thing_start_at\">Start at</label>\r\n  <div class=\"col-sm-10 form-inline\">\r\n    <div class=\"form-group\">\r\n      <div class=\"input-group date\" data-date-autoclose=\"true\" data-date-disable-touch-keyboard=\"true\" data-date-enable-on-readonly=\"false\" data-date-format=\"yyyy-mm-dd\" data-date-show-on-focus=\"false\" data-date-today-btn=\"linked\" data-date-today-highlight=\"true\" data-provide=\"datepicker\">\r\n        <input class=\"form-control\" id=\"thing_start_date\" name=\"thing[start_date]\" size=\"10\" type=\"text\" value=\"1971-10-21\">\r\n        <span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-calendar\"></i></span>\r\n      </div>\r\n    </div>&nbsp;&nbsp;\r\n    <div class=\"form-group\">\r\n      <div class=\"input-group bootstrap-timepicker\">\r\n        <input class=\"form-control\" data-provide=\"timepicker\" id=\"thing_start_time\" name=\"thing[start_time]\" size=\"8\" type=\"text\" value=\"07:30:00\">\r\n        <span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-time\"></i></span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nThe helper assumes the existance of virtual attributes for the data and time, following the naming convention used by the [Date Time Attributes](https://github.com/jdugarte/date_time_attributes) gem. You can specify the names of the virtual attributes like this:\r\n\r\n```erb\r\n<%= f.date_time_picker :start_at, date_method: :start_at_date, time_method: :start_at_time %>\r\n```\r\n\r\nYou can pass options to each control, date and time, like this:\r\n\r\n```erb\r\n<%= date_time_picker :start_at, date_options: { widget: { clear_btn: true } }, time_options: { widget: { disable_mousewheel: true } } %>\r\n```\r\n\r\n## SelectOrNew\r\n\r\nThis helpers creates a select tag with an extra \"New...\" option at the end, that allows the user to input a new item. For instance:\r\n\r\n```erb\r\n<%= f.select_or_new :category, [ [ 'One', 1 ], [ 'Two', 2 ] ] %>\r\n```\r\n\r\ngenerates this html:\r\n\r\n```html\r\n<div class=\"form-group\" data-select-or-new=\"true\">\r\n  <label class=\"control-label col-sm-2\" for=\"thing_category\">Category</label>\r\n  <div class=\"col-sm-10\">\r\n    <select class=\"form-control\" id=\"thing_category\" name=\"thing[category]\">\r\n      <option value=\"\">Please select</option>\r\n      <option value=\"1\">One</option>\r\n      <option value=\"2\">Two</option>\r\n      <option value=\"0\">New...</option>\r\n    </select>\r\n    <div class=\"input-group\" style=\"display: none;\">\r\n      <input class=\"form-control\" id=\"thing_new_category\" name=\"thing[new_category]\" placeholder=\"New...\" type=\"text\">\r\n      <div class=\"input-group-addon select-or-new-cancel\">\r\n        <i class=\"text-danger glyphicon glyphicon-remove\"></i>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nInitially, the control looks like a regular select tag:\r\n\r\n![select_or_new - select](https://raw.githubusercontent.com/jdugarte/rails-bootstrap-form-extensions/2ee06731be906d44edf6104a44e5db9d3a7790b8/images/select_or_new%20-%20select.png)\r\n\r\nWhen \"New...\" is selected, it turns to:\r\n\r\n![select_or_new - input](https://raw.githubusercontent.com/jdugarte/rails-bootstrap-form-extensions/2ee06731be906d44edf6104a44e5db9d3a7790b8/images/select_or_new%20-%20input.png)\r\n\r\nTo go back to the select (canceling the new input), click on the cancel button (the red X).\r\n\r\nThe helper accepts the same parameters as [Rails' select helper](http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-select), plus any option you'd pass to a form_group.\r\n\r\nIf any of the choices you provided is selected, the appropriate value will be set in the filed (category_id, in the previous example). If \"New...\" is selected, the id will be set to '0', and a field called \"new\\__field_\" will be added (in the previous example that would be: category_id = '0', new_category = 'New Category').\r\n\r\n### Handling the new value\r\n\r\nYou could have something like this in the controller:\r\n\r\n```ruby\r\nclass ThingsController < ApplicationController\r\n\r\n  ...\r\n\r\n  def create\r\n    @thing = Thing.build thing_params\r\n    @thing.save_with_category\r\n    respond_with @thing\r\n  end\r\n\r\n  def update\r\n    @thing = Thing.find(params[:id])\r\n    @thing.assign_attributes thing_params\r\n    @thing.save_with_category\r\n    respond_with @thing\r\n  end\r\n\r\n  private\r\n\r\n  def thing_params\r\n    params.require(:thing).permit :name, :category_id, :new_category\r\n  end\r\n\r\n  ...\r\n\r\nend\r\n```\r\n\r\nAnd then in the model:\r\n\r\n```ruby\r\nclass Thing < ActiveRecord::Base\r\n\r\n  belongs_to :category\r\n\r\n  validates :name, :category_id, presence: true\r\n  validate :new_category_presence\r\n\r\n  attr_accessor :new_category\r\n\r\n  def save_with_category\r\n    return false unless valid?\r\n    transaction { add_category_if_new && save }\r\n  end\r\n\r\n  private\r\n\r\n  def add_category_if_new\r\n    return true unless category_id == 0\r\n\r\n    category = Category.build name: new_category\r\n    if category.save\r\n      self.category, self.new_category = category, ''\r\n      return true\r\n    end\r\n\r\n    errors.add :category_id, category.errors.full_messages\r\n    return false\r\n  end\r\n\r\n  def new_category_presence\r\n    return true unless category_id == 0\r\n\r\n    if new_category.blank?\r\n      errors.add :category_id, \"can't be blank\"\r\n      return false\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\n## Contributing\r\n\r\nHere's a quick guide for contributing:\r\n\r\n1. Fork the repo.\r\n\r\n2. Run the existing test suite:\r\n\r\n```\r\n$ bundle exec rake -f test/dummy/Rakefile db:create db:migrate RAILS_ENV=test\r\n$ bundle exec rake\r\n$ bundle exec rake jasmine:ci\r\n```\r\n\r\n3. Add tests for your change.\r\n\r\n4. Add your changes and make your test(s) pass.\r\n\r\n5. Update the README if necessary.\r\n\r\n6. Add a line to the CHANGELOG for your bug fix or feature.\r\n\r\n7. Push to your fork and submit a pull request.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}