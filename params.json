{"name":"Rails Bootstrap Form Extensions","tagline":"Specialized controls added to the bootstrap_form gem","body":"# Rails Bootstrap Form Extensions\r\n\r\n## Requirements\r\n\r\n* Ruby 2.0+\r\n* Rails 4.0+\r\n* Twitter Bootstrap 3.0+\r\n\r\n## Installation\r\n\r\nAdd it to your Gemfile:\r\n\r\n```ruby\r\ngem 'bootstrap_form_extensions'\r\n```\r\n\r\nThen:\r\n\r\n`bundle`\r\n\r\nThen require the JS in your `application.js` file:\r\n\r\n```js\r\n/*\r\n *= require bootstrap_form_extensions\r\n */\r\n```\r\n\r\nAnd require the CSS in your `application.css` file:\r\n\r\n```css\r\n/*\r\n *= require rails_bootstrap_form_extensions\r\n */\r\n```\r\n\r\n## SubmitBar\r\n\r\nUsing all the default arguments, doing this:\r\n\r\n```erb\r\n<%= f.submit_bar %>\r\n```\r\n\r\ngenerates a form group, with two buttons: Save (a dropdown menu, that includes 'Save and duplicate', and 'Save and new' options), and Cancel:\r\n\r\n```html\r\n<div class=\"form-group\">\r\n  <div class='pull-left submitbar-left'>\r\n    <div class=\"btn-group dropup submitbar-submit-group\">\r\n      <button type=\"submit\" class=\"btn btn-primary submitbar-save\">Save</button>\r\n      <button type=\"button\" class=\"btn btn-primary dropdown-toggle submitbar-next-action-toggle\" data-toggle=\"dropdown\">\r\n        <span class=\"caret\"></span>\r\n        <span class=\"sr-only\">Toggle Dropdown</span>\r\n      </button>\r\n      <ul class=\"dropdown-menu submitbar-next-action-menu\" role=\"menu\">\r\n        <li><button type=\"submit\" name=\"next_action\" class=\"btn-link submitbar-duplicate\" value=\"duplicate\">Save and duplicate</button></li>\r\n        <li><button type=\"submit\" name=\"next_action\" class=\"btn-link submitbar-new\" value=\"new\">Save and new</button></li>\r\n      </ul>\r\n    </div>\r\n    <a class=\"btn btn-default submitbar-cancel\" rel=\"nofollow\" href=\"/things\">Cancel</a>\r\n  </div>\r\n</div>\r\n```\r\n\r\n### Configuration\r\n\r\nThe following arguments can be used to configure the submit bar:\r\n\r\n| Argument | Description | Default |\r\n| -------- |-------------| --------|\r\n| show_submit_button         | Show the Save button | true |\r\n| submit_button_text         | Text used in the save button | 'Save' |\r\n| show_submit_menu           | Show the dropdown menu on the save button | true |\r\n| show_submit_and_dup_button | Show a 'Save and duplicate' option in the dropdown submit menu. The 'Save' text is affected by the submit_button_text argument | true |\r\n| show_submit_and_new_button | Show a 'Save and new' option in the dropdown submit menu. The 'Save' text is affected by the submit_button_text argument | true |\r\n| show_cancel_button         | Show the Cancel button| true |\r\n| cancel_button_text         | Text used in the cancel button | 'Cancel' |\r\n| cancel_button_url          | URL used in the cancel button | If the form object is a persisted ActiveRecord instance, the url to the show action; if not, the index action. If none of these path exit, then it uses 'javascript:history.back();' |\r\n| extra_buttons              | An array of hashes with the definition of the extra buttons to be added between the submit and cancel buttons. The options should include at least :text and :url for the button. Anything else is passed as html options to the button | [] |\r\n| right_buttons              | An array of hashes with the definition of the extra buttons to be added on the right side of the submit bar. The options should include at least :text and :url for the button. Anything else is passed as html options to the button | [] |\r\n| partial                    | Partial template used to render the submit bar | See _Default partial_ below for details |\r\n\r\nYou can also change the default of `partial`, `show_submit_button`, `submit_button_text`, `show_submit_menu`, `show_submit_and_dup_button`, `show_submit_and_new_button`, `show_cancel_button`, `cancel_button_text`, or `back_button_text`, by invoking them on the BootstrapFormExtensions::SubmitBar, for example in an initializer file, like this:\r\n\r\n```ruby\r\nBootstrapFormExtensions::SubmitBar.partial = 'layouts/form_footer'\r\nBootstrapFormExtensions::SubmitBar.show_submit_menu = false\r\n```\r\n\r\n### Default partial\r\n\r\nThis is the actual code of the default partial (located in app/views/bootstrap_form_extensions/_submit_bar.html.erb):\r\n\r\n```erb\r\n<div class=\"form-group\">\r\n  <div class='pull-left submitbar-left'>\r\n    <% if show_submit_button %>\r\n      <div class=\"btn-group dropup submitbar-submit-group\">\r\n        <button type=\"submit\" class=\"btn btn-primary submitbar-save\"><%= submit_button_text %></button>\r\n        <% if show_submit_menu %>\r\n          <button type=\"button\" class=\"btn btn-primary dropdown-toggle submitbar-next-action-toggle\" data-toggle=\"dropdown\">\r\n            <span class=\"caret\"></span>\r\n            <span class=\"sr-only\">Toggle Dropdown</span>\r\n          </button>\r\n          <ul class=\"dropdown-menu submitbar-next-action-menu\" role=\"menu\">\r\n            <% if show_submit_and_dup_button %>\r\n              <li><button type=\"submit\" name=\"next_action\" class=\"btn-link submitbar-duplicate\" value=\"duplicate\"><%= submit_button_text %> and duplicate</button></li>\r\n            <% end %>\r\n            <% if show_submit_and_new_button %>\r\n              <li><button type=\"submit\" name=\"next_action\" class=\"btn-link submitbar-new\" value=\"new\"><%= submit_button_text %> and new</button></li>\r\n            <% end %>\r\n          </ul>\r\n        <% end %>\r\n      </div>\r\n    <% end %>\r\n    <% extra_buttons.each do |text:, url:, options:| %>\r\n      <%= link_to text, url, options %>\r\n    <% end %>\r\n    <% if show_cancel_button %>\r\n      <%= link_to cancel_button_text, cancel_button_url, class: \"btn btn-default submitbar-cancel\", rel: \"nofollow\" %>\r\n    <% end %>\r\n  </div>\r\n  <% if right_buttons.any? %>\r\n    <div class='pull-right submitbar-right'>\r\n      <% right_buttons.each do |text:, url:, options:| %>\r\n        <%= link_to text, url, options %>\r\n      <% end %>\r\n    </div>\r\n  <% end %>\r\n</div>\r\n```\r\n\r\nYou can use it as a template to create your own partial(s).\r\n\r\n## Timespan\r\n\r\nHaving, for example, a column `duration_in_seconds`, doing this:\r\n\r\n```erb\r\n<%= f.timespan :duration_in_seconds %>\r\n```\r\n\r\ngenerates this html:\r\n\r\n```html\r\n<span data-timespan=\"true\">\r\n  <input class=\"timespan-seconds\" type=\"hidden\" value=\"3600\" name=\"thing[duration_in_seconds]\" id=\"thing_duration_in_seconds\" />\r\n  <div class=\"form-group\">\r\n    <input type=\"text\" name=\"duration_quantity\" id=\"duration_quantity\" value=\"1\" size=\"5\" class=\"form-control timespan-quantity\" />\r\n  </div>\r\n  &nbsp;\r\n  <div class=\"form-group\">\r\n    <select name=\"duration_unit\" id=\"duration_unit\" class=\"form-control timespan-unit\">\r\n      <option selected=\"selected\" value=\"1\">seconds</option>\r\n      <option value=\"60\">minutes</option>\r\n      <option value=\"3600\">hours</option>\r\n      <option value=\"86400\">days</option>\r\n      <option value=\"604800\">weeks</option>\r\n      <option value=\"18144000\">months</option>\r\n    </select>\r\n  </div>\r\n</span>\r\n```\r\n\r\n### Configuration\r\n\r\nThe following arguments can be used to configure the timespan:\r\n\r\n| Argument | Description | Default |\r\n| -------- |-------------| --------|\r\n| units            | The list of units that will be displayed       | [ :seconds, :minutes, :hours, :days, :weeks, :months ] |\r\n| quantity_options | html options to be added to the quantity input | {} |\r\n| unit_options     | html options to be added to the unit select    | {} |\r\n\r\nYou can also change the default of `units` by invoking it on the BootstrapFormExtensions::Timespan, for example in an initializer file, like this:\r\n\r\n```ruby\r\nBootstrapFormExtensions::Timespan.units = [ :hours, :days ]\r\n```\r\n\r\n## ArrayedField\r\n\r\nArrayedField provides three helpers:\r\n\r\n### arrayed_text_field\r\n\r\nGiven a column that holds an array of texts, this helper adds a multiple line text inputs:\r\n\r\n```erb\r\n<%= f.arrayed_text_field :lists %>\r\n```\r\n\r\nIt accepts any option you'd pass to a form_group. If the column provided doesn't exist, or is not an array, it assumes an empty array as the value.\r\n\r\n### arrayed_url_field\r\n\r\nGiven a column that holds an array of URLs, this helper adds a multiple line url inputs:\r\n\r\n```erb\r\n<%= f.arrayed_url_field :urls %>\r\n```\r\n\r\nIt accepts any option you'd pass to a form_group. If the column provided doesn't exist, or is not an array, it assumes an empty array as the value.\r\n\r\n### arrayed_json_field\r\n\r\nGiven a column that holds an array of hashes, this helper adds a multiple line, multiple field, text/select inputs:\r\n\r\n```erb\r\n<%= f.arrayed_json_field :variables, [ :name, :value ] %>\r\n```\r\n\r\nThe generated html contains multiple lines like this:\r\n\r\n```html\r\n<div class=\"col-sm-2\">\r\n  <input type=\"text\" name=\"thing[variables][][name]\" class=\"form-control\" placeholder=\"name\" />\r\n</div>\r\n<div class=\"col-sm-2\">\r\n  <input type=\"text\" name=\"thing[variables][][value]\" class=\"form-control\" placeholder=\"value\" />\r\n</div>\r\n```\r\n\r\nThe list of fields in the hash can be customized further:\r\n\r\n```erb\r\n<%= f.arrayed_json_field :variables, [ { name: { type: :select, options: [ [ \"One\", \"var1\" ], [ \"Two\", \"var2\" ] ] } }, :value ] %>\r\n```\r\n\r\n`type` can be `:text` or `:select`.\r\n\r\nThe generated html for each element of the array would look something like this:\r\n\r\n```html\r\n<div class=\"col-sm-2\">\r\n  <select class=\"form-control\">\r\n    <option value=\"var1\">One</option>\r\n    <option value=\"var2\">Two</option>\r\n  </select>\r\n</div>\r\n<div class=\"col-sm-2\">\r\n  <input class=\"form-control\" name=\"thing[variables][][value]\" placeholder=\"value\" type=\"text\">\r\n</div>\r\n```\r\n\r\nIt accepts any option you'd pass to a form_group. If the column provided doesn't exist, or is not an array, it assumes an empty array as the value.\r\n\r\n## Contributing\r\n\r\nHere's a quick guide for contributing:\r\n\r\n1. Fork the repo.\r\n\r\n2. Run the existing test suite:\r\n\r\n```\r\n$ bundle exec rake -f test/dummy/Rakefile db:create db:migrate RAILS_ENV=test\r\n$ bundle exec rake\r\n$ bundle exec rake jasmine:ci\r\n```\r\n\r\n3. Add tests for your change.\r\n\r\n4. Add your changes and make your test(s) pass.\r\n\r\n5. Update the README if necessary.\r\n\r\n6. Add a line to the CHANGELOG for your bug fix or feature.\r\n\r\n7. Push to your fork and submit a pull request.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}